apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    defaultConfig {
        applicationId "${app_id}"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode java.lang.Integer.parseInt("${version_code}")
        versionName "${version_name}"

        //These are the values for the authorities and account types.
        //Reference them in the java files with e.g. BuildConfig.ACCOUNT_TYPE.
        buildConfigField "String", "PROJECT_NUMBER", "\"${project_number}\""
        buildConfigField "String", "DATABASE_NAME", "\"${db_name}\""
        buildConfigField "String", "STORE_ID", "\"${store_id}\""
        buildConfigField "String", "STORE_TYPE", "\"${store_type}\""
        buildConfigField "int", "DB_VERSION", "${db_version}"
        buildConfigField "String", "NETWORK_URL", "\"${network_url}${store_id}/${api_version}\""

        //Reference them in .xml files.
        resValue "string", "app_name", "${app_name}"
        resValue "color", "ColorPrimary", "${color_primary}"
        resValue "color", "ColorPrimaryDark", "${color_primary_dark}"

    }
    tasks.whenTaskAdded { task ->
        if (task.name.equals("lint")) {
            task.enabled = false
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "map_api_key", "${map_key_dev}"
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def apk = output.outputFile;
                    def version = "ver.${variant.versionCode}.${variant.versionName}.${db_version}"
                    def newName = output.outputFile.name
                    newName = newName.replace("-debug", "-dev-" + version)
                    output.outputFile = new File(apk.parentFile, newName);
                }
            }
        }
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "map_api_key", "${map_key}"
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def apk = output.outputFile;
                    def version = "ver.${variant.versionCode}.${variant.versionName}-db.${db_version}"
                    def newName = output.outputFile.name
                    newName = newName.replace("-release", "-release-" + version)
                    output.outputFile = new File(apk.parentFile, newName);
                }
            }
        }
    }

}

ext {
    supportLibVersion = '23.0.1'
    playLibVersion = '7.8.0'
    playLibVersion = '7.8.0'
    okhttpLibVersion = '2.0.0'
    retrofitLibVersion = '1.9.0'
    picassoLibVersion = '2.5.2'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.squareup.retrofit:retrofit:${retrofitLibVersion}"
    compile "com.squareup.okhttp:okhttp:${okhttpLibVersion}"
    compile "com.squareup.okhttp:okhttp-urlconnection:${okhttpLibVersion}"
    compile "com.google.android.gms:play-services-gcm:${playLibVersion}"
    compile "com.google.android.gms:play-services-maps:${playLibVersion}"
    compile "com.google.android.gms:play-services-location:${playLibVersion}"
    compile "com.google.android.gms:play-services-analytics:${playLibVersion}"
    compile "com.squareup.picasso:picasso:${picassoLibVersion}"
}
