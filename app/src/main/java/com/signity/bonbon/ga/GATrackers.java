package com.signity.bonbon.ga;

import android.content.Context;

import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.StandardExceptionParser;
import com.google.android.gms.analytics.Tracker;
import com.signity.bonbon.BuildConfig;
import com.signity.bonbon.R;

import java.util.HashMap;
import java.util.Map;

/**
 * A collection of Google Analytics trackers. Fetch the tracker you need using
 * {@code AnalyticsTrackers.getInstance().get(...)}
 * <p/>
 * This code was generated by Android Studio but can be safely modified by
 * hand at this point.
 * <p/>
 * TODO: Call {@link #initialize(Context)} from an entry point in your app
 * before using this!
 */
public class GATrackers {

    Tracker defaultAppTracker;

    public enum Target {
        APP,
        // Add more trackers here if you need, and update the code in #get(Target) below
    }


    private static GATrackers sInstance;

    public static synchronized void initialize(Context context) {
        if (sInstance != null) {
            throw new IllegalStateException("Extra call to initialize analytics trackers");
        }
        sInstance = new GATrackers(context);
    }

    public static synchronized GATrackers getInstance() {
        if (sInstance == null) {
            throw new IllegalStateException("Call initialize() before getInstance()");
        }

        return sInstance;
    }

    public synchronized Tracker getDefaulTracker() {
        return defaultAppTracker;
    }

    public synchronized void setDefaultAppTracker(String trackerId) {

        if (!BuildConfig.DEBUG) {
            defaultAppTracker = get(Target.APP, trackerId);
        } else {
            defaultAppTracker = get(Target.APP, GAConstant.GA_TRACK_ID_DEBUG);
        }
    }

    private final Map<Target, Tracker> mTrackers = new HashMap<Target, Tracker>();
    public final Context mContext;

    /**
     * Don't instantiate directly - use {@link #getInstance()} instead.
     */
    public GATrackers(Context context) {
        mContext = context.getApplicationContext();
    }

    public synchronized Tracker get(Target target, String trackId) {
        if (!mTrackers.containsKey(target)) {
            Tracker tracker;
            switch (target) {
                case APP:
                    tracker = GoogleAnalytics.getInstance(mContext).newTracker(trackId);
                    String trackerName = "GA- " + mContext.getString(R.string.app_name);
                    tracker.setAppName(trackerName);
                    tracker.setAppVersion(BuildConfig.VERSION_CODE + "." + BuildConfig.VERSION_NAME);
                    tracker.setAppId(BuildConfig.APPLICATION_ID);
                    tracker.setSessionTimeout(300);
                    tracker.enableExceptionReporting(true);
                    break;
                default:
                    throw new IllegalArgumentException("Unhandled analytics target " + target);
            }
            mTrackers.put(target, tracker);
        }

        return mTrackers.get(target);
    }


    /***
     * Tracking screen view for custom tracker
     *
     * @param screenName screen name to be displayed on GA dashboard
     */
    public void trackScreenView(Tracker t, String screenName) {
        // Set screen name.
        t.setScreenName(screenName);
        // Send a screen view.
        t.send(new HitBuilders.ScreenViewBuilder().build());
        GoogleAnalytics.getInstance(mContext).dispatchLocalHits();
    }

    /***
     * Tracking exception
     *
     * @param e exception to be tracked
     */
    public void trackException(Tracker t, Exception e) {
        if (e != null) {

            t.send(new HitBuilders.ExceptionBuilder()
                    .setDescription(
                            new StandardExceptionParser(mContext, null)
                                    .getDescription(Thread.currentThread().getName(), e))
                    .setFatal(false)
                    .build()
            );
        }
    }

    /***
     * Tracking event
     *
     * @param category event category
     * @param action   action of the event
     * @param label    label
     */
    public void trackEvent(Tracker tracker, String category, String action, String label) {
        // Build and send an Event.
        tracker.send(new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build());
    }

    /***
     * Tracking screen view for Default tracker
     *
     * @param screenName screen name to be displayed on GA dashboard
     */
    public void trackScreenView(String screenName) {
        String appName = "GA- " + mContext.getString(R.string.app_name);
        screenName = appName + "-" + screenName;
        // Set screen name.
        defaultAppTracker.setScreenName(screenName);
        // Send a screen view.
        defaultAppTracker.send(new HitBuilders.ScreenViewBuilder().build());
        GoogleAnalytics.getInstance(mContext).dispatchLocalHits();
    }

    /***
     * Tracking exception
     *
     * @param e exception to be tracked
     */
    public void trackException(Exception e) {
        if (e != null) {
            defaultAppTracker.send(new HitBuilders.ExceptionBuilder()
                    .setDescription(
                            new StandardExceptionParser(mContext, null)
                                    .getDescription(Thread.currentThread().getName(), e))
                    .setFatal(false)
                    .build()
            );
        }
    }

    /***
     * Tracking event
     *
     * @param category event category
     * @param action   action of the event
     * @param label    label
     */
    public void trackEvent(String category, String action, String label) {

        // Build and send an Event.
        defaultAppTracker.send(new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build());
    }

}
